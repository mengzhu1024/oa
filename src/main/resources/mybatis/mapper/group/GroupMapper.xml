<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.oa.group.mapper.GroupMapper">
    <resultMap id="BaseResultMap" type="com.oa.group.entity.Group">
        <id column="id" jdbcType="VARCHAR" property="id"/>
        <result column="name" jdbcType="VARCHAR" property="name"/>
        <result column="desc" jdbcType="VARCHAR" property="desc"/>
        <result column="type" jdbcType="INTEGER" property="type"/>
        <result column="dep_id" jdbcType="VARCHAR" property="depId"/>
        <result column="gmt_create" jdbcType="TIMESTAMP" property="gmtCreate"/>
        <result column="gmt_modified" jdbcType="TIMESTAMP" property="gmtModified"/>
    </resultMap>
    <sql id="BaseColumns">
        `id`, `name`, `desc`, `type`, `dep_id`, `gmt_create`, `gmt_modified`
    </sql>
    <insert id="insert" parameterType="com.oa.group.entity.Group">
        insert into group_group values(#{id,jdbcType=VARCHAR},
        #{name, jdbcType=VARCHAR},
        #{desc, jdbcType=VARCHAR},
        #{type, jdbcType=INTEGER},
        #{depId, jdbcType=VARCHAR},
        now(),
        now())
    </insert>
    <insert id="insertSelective" parameterType="com.oa.group.entity.Group">
        insert into group_group
        <trim prefix="(" suffix=")" suffixOverrides=",">
            <if test="id != null">`id`,</if>
            <if test="name != null">`name`,</if>
            <if test="desc != null">`desc`,</if>
            <if test="type != null">`type`,</if>
            <if test="depId != null">`dep_id`,</if>
            `gmt_create`,
            `gmt_modified`
        </trim>
        <trim prefix="values (" suffix=")" suffixOverrides=",">
            <if test="id != null">#{id, jdbcType=VARCHAR},</if>
            <if test="name != null">#{name, jdbcType=VARCHAR},</if>
            <if test="desc != null">#{desc, jdbcType=VARCHAR},</if>
            <if test="type != null">#{type, jdbcType=INTEGER},</if>
            <if test="depId != null">#{depId, jdbcType=VARCHAR},</if>
            now(),
            now()
        </trim>
    </insert>
    <update id="updateByPrimaryKey" parameterType="com.oa.group.entity.Group">
        update group_group
        <set>
            `name` = #{name, jdbcType=VARCHAR},
            `desc` = #{desc, jdbcType=VARCHAR},
            `type` = #{type, jdbcType=INTEGER},
            `dep_id` = #{depId, jdbcType=VARCHAR},
            `gmt_modified` = now()
        </set>
        where `id` = #{id, jdbcType=VARCHAR}
    </update>
    <update id="updateByPrimaryKeySelective" parameterType="com.oa.group.entity.Group">
        update group_group
        <set>
            <if test="name != null">`name` = #{name, jdbcType=VARCHAR},</if>
            <if test="desc != null">`desc` = #{desc, jdbcType=VARCHAR},</if>
            <if test="type != null">`type` = #{type, jdbcType=INTEGER},</if>
            <if test="depId != null">`dep_id` = #{depId, jdbcType=VARCHAR},</if>
            `gmt_modified` = now()
        </set>
        where `id` = #{id, jdbcType=VARCHAR}
    </update>
    <update id="updateByCriteria">
        update group_group
        <set>
            `name` = #{t.name, jdbcType=VARCHAR},
            `desc` = #{t.desc, jdbcType=VARCHAR},
            `type` = #{t.type, jdbcType=INTEGER},
            `dep_id` = #{t.depId, jdbcType=VARCHAR},
            `gmt_modified` = now()
        </set>
    </update>
    <update id="updateByCriteriaSelective">
        update group_group
        <set>
            <if test="t.name != null">`name` = #{t.name, jdbcType=VARCHAR},</if>
            <if test="t.desc != null">`desc` = #{t.desc, jdbcType=VARCHAR},</if>
            <if test="t.type != null">`type` = #{t.type, jdbcType=INTEGER},</if>
            <if test="t.depId != null">`dep_id` = #{t.depId, jdbcType=VARCHAR},</if>
            `gmt_modified` = now()
        </set>
    </update>
    <delete id="deleteByPrimaryKey" parameterType="java.lang.String">
        delete from group_group where `id` = #{id, jdbcType=VARCHAR}
    </delete>
    <delete id="deleteByCriteria">
        delete from group_group
    </delete>
    <delete id="batchDelete">
        delete from group_group where `id` in
        <foreach collection="array" item="entity" open="(" close=")" separator=",">
            #{entity.id}
        </foreach>
    </delete>
    <select id="selectByPrimaryKey" parameterType="java.lang.String" resultMap="BaseResultMap">
        select <include refid="BaseColumns"/>from group_group where `id` = #{id, jdbcType=VARCHAR}
    </select>
    <select id="selectAll" resultMap="BaseResultMap" flushCache="true">
        select <include refid="BaseColumns"/>from group_group
    </select>
    <select id="countByCriteria" resultType="java.lang.Integer">
        select count(*) from group_group
    </select>
    <select id="selectSingleShadow" resultType="object">
        select ${columns} from group_group
    </select>
    <select id="selectMutipleShadow" resultType="map">
        select ${columns} from group_group
    </select>

    <!-- 这里开始自定义方法 -->
    <insert id="insertGroupDocument" parameterType="java.lang.String">
        insert into group_document values(#{groupId}, #{documentId})
    </insert>

    <!-- 通过Employee移除、添加 -->
    <delete id="deleteGroupEmployee" parameterType="java.lang.String">
        delete from group_employee where ${column} = #{id}
    </delete>

    <insert id="insertGroupEmployee" parameterType="java.lang.String">
        insert into group_employee values(#{groupId}, #{employeeId})
    </insert>

    <resultMap type="com.oa.group.entity.GroupExt" id="GroupWithMemberMap" extends="BaseResultMap">
        <collection property="employeeIds" ofType="string">
            <id column="e_id"/>
        </collection>
    </resultMap>

    <select id="selectWithMember" parameterType="java.lang.String" resultMap="GroupWithMemberMap">
        select g.*, ge.employee_id e_id from group_group g
        left join group_employee ge on g.id = ge.group_id
        where g.id = #{id}
    </select>

    <delete id="removeDocument" parameterType="map">
        delete from group_document where group_id = #{id} and document_id in
        <foreach collection="documentIds" item="documentId" open="(" close=")" separator=",">
            #{documentId}
        </foreach>
    </delete>
</mapper>