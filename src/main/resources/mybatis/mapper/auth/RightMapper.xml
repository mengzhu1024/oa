<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.oa.auth.mapper.RightMapper">
    <resultMap id="BaseResultMap" type="com.oa.auth.entity.Right">
        <id column="id" jdbcType="VARCHAR" property="id"/>
        <result column="name" jdbcType="VARCHAR" property="name"/>
        <result column="url" jdbcType="VARCHAR" property="url"/>
        <result column="desc" jdbcType="VARCHAR" property="desc"/>
        <result column="code" jdbcType="INTEGER" property="code"/>
        <result column="pos" jdbcType="INTEGER" property="pos"/>
        <result column="common" jdbcType="BIT" property="common"/>
        <result column="gmt_create" jdbcType="TIMESTAMP" property="gmtCreate"/>
        <result column="gmt_modified" jdbcType="TIMESTAMP" property="gmtModified"/>
    </resultMap>
    <sql id="BaseColumns">
        `id`, `name`, `url`, `desc`, `code`, `pos`, `common`, `gmt_create`, `gmt_modified`
    </sql>
    <insert id="insert" parameterType="com.oa.auth.entity.Right">
        insert into auth_right values(#{id,jdbcType=VARCHAR},
        #{name, jdbcType=VARCHAR},
        #{url, jdbcType=VARCHAR},
        #{desc, jdbcType=VARCHAR},
        #{code, jdbcType=INTEGER},
        #{pos, jdbcType=INTEGER},
        #{common, jdbcType=BIT},
        now(),
        now())
    </insert>
    <insert id="insertSelective" parameterType="com.oa.auth.entity.Right">
        insert into auth_right
        <trim prefix="(" suffix=")" suffixOverrides=",">
            <if test="id != null">`id`,</if>
            <if test="name != null">`name`,</if>
            <if test="url != null">`url`,</if>
            <if test="desc != null">`desc`,</if>
            <if test="code != null">`code`,</if>
            <if test="pos != null">`pos`,</if>
            <if test="common != null">`common`,</if>
            `gmt_create`,
            `gmt_modified`
        </trim>
        <trim prefix="values (" suffix=")" suffixOverrides=",">
            <if test="id != null">#{id, jdbcType=VARCHAR},</if>
            <if test="name != null">#{name, jdbcType=VARCHAR},</if>
            <if test="url != null">#{url, jdbcType=VARCHAR},</if>
            <if test="desc != null">#{desc, jdbcType=VARCHAR},</if>
            <if test="code != null">#{code, jdbcType=INTEGER},</if>
            <if test="pos != null">#{pos, jdbcType=INTEGER},</if>
            <if test="common != null">#{common, jdbcType=BIT},</if>
            now(),
            now()
        </trim>
    </insert>
    <update id="updateByPrimaryKey" parameterType="com.oa.auth.entity.Right">
        update auth_right
        <set>
            `name` = #{name, jdbcType=VARCHAR},
            `url` = #{url, jdbcType=VARCHAR},
            `desc` = #{desc, jdbcType=VARCHAR},
            `code` = #{code, jdbcType=INTEGER},
            `pos` = #{pos, jdbcType=INTEGER},
            `common` = #{common, jdbcType=BIT},
            `gmt_modified` = now()
        </set>
        where `id` = #{id, jdbcType=VARCHAR}
    </update>
    <update id="updateByPrimaryKeySelective" parameterType="com.oa.auth.entity.Right">
        update auth_right
        <set>
            <if test="name != null">`name` = #{name, jdbcType=VARCHAR},</if>
            <if test="url != null">`url` = #{url, jdbcType=VARCHAR},</if>
            <if test="desc != null">`desc` = #{desc, jdbcType=VARCHAR},</if>
            <if test="code != null">`code` = #{code, jdbcType=INTEGER},</if>
            <if test="pos != null">`pos` = #{pos, jdbcType=INTEGER},</if>
            <if test="common != null">`common` = #{common, jdbcType=BIT},</if>
            `gmt_modified` = now()
        </set>
        where `id` = #{id, jdbcType=VARCHAR}
    </update>
    <update id="updateByCriteria">
        update auth_right
        <set>
            `name` = #{t.name, jdbcType=VARCHAR},
            `url` = #{t.url, jdbcType=VARCHAR},
            `desc` = #{t.desc, jdbcType=VARCHAR},
            `code` = #{t.code, jdbcType=INTEGER},
            `pos` = #{t.pos, jdbcType=INTEGER},
            `common` = #{t.common, jdbcType=BIT},
            `gmt_modified` = now()
        </set>
    </update>
    <update id="updateByCriteriaSelective">
        update auth_right
        <set>
            <if test="t.name != null">`name` = #{t.name, jdbcType=VARCHAR},</if>
            <if test="t.url != null">`url` = #{t.url, jdbcType=VARCHAR},</if>
            <if test="t.desc != null">`desc` = #{t.desc, jdbcType=VARCHAR},</if>
            <if test="t.code != null">`code` = #{t.code, jdbcType=INTEGER},</if>
            <if test="t.pos != null">`pos` = #{t.pos, jdbcType=INTEGER},</if>
            <if test="t.common != null">`common` = #{t.common, jdbcType=BIT},</if>
            `gmt_modified` = now()
        </set>
    </update>
    <delete id="deleteByPrimaryKey" parameterType="java.lang.String">
        delete from auth_right where `id` = #{id, jdbcType=VARCHAR}
    </delete>
    <delete id="deleteByCriteria">
        delete from auth_right
    </delete>
    <delete id="batchDelete">
        delete from auth_right where `id` in
        <foreach collection="array" item="entity" open="(" close=")" separator=",">
            #{entity.id}
        </foreach>
    </delete>
    <select id="selectByPrimaryKey" parameterType="java.lang.String" resultMap="BaseResultMap">
        select <include refid="BaseColumns"/>from auth_right where `id` = #{id, jdbcType=VARCHAR}
    </select>
    <select id="selectAll" resultMap="BaseResultMap" flushCache="true">
        select <include refid="BaseColumns"/>from auth_right
    </select>
    <select id="countByCriteria" resultType="java.lang.Integer">
        select count(*) from auth_right
    </select>
    <select id="selectSingleShadow" resultType="object">
        select ${columns} from auth_right
    </select>
    <select id="selectMutipleShadow" resultType="map">
        select ${columns} from auth_right
    </select>

    <!-- 这里是自定义方法 -->
    <select id="selectMaxRight" resultMap="BaseResultMap">
        select max(pos) pos,
        max(code) code from auth_right r where r.pos = (select max(rr.pos)
        from auth_right rr)
    </select>
</mapper>